@page "/form"
@using Reimbursement.Data;
@using Reimbursement.PdfData;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using System.IO;
@using System;
@using System.Drawing;
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment env
@inject FormInfo formInfo
@inject Mailservice Mail
@inject IJSRuntime jsRuntime
@inject PDF pdf
@inject UserController usercontroller
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationmanager
@inherits LayoutComponentBase
@inject PdfData.PDF Pdf

<PageTitle>Form</PageTitle>

<style>
.content {
  max-width: 500px;
  margin: auto;
}
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        -moz-appearance: none;
        margin: 0;
    }
</style>

<body>
    
<div class="content">
    <EditForm id="form" Model="@formInfo" Context="formContext">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h3><nobr>Personlige oplysninger</nobr></h3>
        <p>
            <label>Navn:</label>
            <InputText @bind-Value="formInfo.Name"/><br />
        </p>
        <p>
            <label>Telefon:</label>
            <InputText @bind-Value="formInfo.Phone" /><br />
        </p>
        <p>
            <label>Email:</label>
                <InputText @bind-Value="formInfo.Email"/><br />
        </p>
        <h3>Udgiftens formål</h3>
        <p>
            <label>Gruppe:</label>
                <InputSelect @bind-Value="formInfo.GroupStr" @onclick="formInfo.PopulateAccounts" style="width: 200px;">
                <option>Vælg en gruppe</option>
                    @for (int i = 0; i < formInfo.GroupList.Count; i++) {
                        <option>@formInfo.GroupList[i]</option>
                    }
                </InputSelect><br>
        </p>
        <p>
            <label>Hvad er pengene brugt på:</label>
            <InputText @bind-Value="formInfo.Purpose" /><br />
        </p>
        <h3>OBS: Ved fortæring skal alle tilstedeværendes navn oplyses:</h3>
            <InputTextArea @bind-Value="formInfo.ConsumptionParty" rows="3" cols="30"></InputTextArea>
        <h3>Postering</h3>
        <p>
            <label>Udgiftens størrelse:</label>
            <nobr><InputText @bind-Value="formInfo.Amount" />kr.</nobr>
        </p>
        <p>
            <label>Konto:</label>
            <input list="accountList" id="accountListInput" size="30" @bind-value="formInfo.Account" align="right">
            <datalist id="accountList">
                @for (int i = 0; i < formInfo.accountList.Count; i++) {
                    <option>@formInfo.accountList[i]</option>
                }
            </datalist>
        </p>
        <h3>Udbetaling</h3>
        <p>
            <label>Pengene er udbetalt kontant</label>
            <InputRadioGroup Name="CashOption" @bind-Value="formInfo.Cash">
                <InputRadio Name="CashOption"  Value=true /> 
            </InputRadioGroup>
        </p>
        <p>
            <label>Pengene overføres til konto</label>
            <InputRadioGroup Name="CashOption" @bind-Value="formInfo.Cash">
                    <InputRadio Name="CashOption" Value=false />
            </InputRadioGroup>
        </p>
        <h3>Konto</h3>
        <p>
            <label>Reg. Nr.</label>
            <InputText @bind-Value="formInfo.RegNr" /><br />
        </p>
        <p>
            <label>Kontonummer:</label>
            <InputText @bind-Value="formInfo.AccountNumber"/><br />
        </p>
        <br />
        <div align="center"></div>

            <button type="submit" form="form" class="button-Indsend" @onclick="@(() => SendReimbursement(formContext))">Indsend</button>
            <button type="submit" form="form" class="button-Preview" @onclick="@((args) => PreviewPdf(args,formContext))">Preview</button>
            <button type="button" class="button-Logout"  @onclick="LogOutUser">Log ud</button>
            
    </EditForm>

</div>
<h1>Vedhæft kvittering</h1>

    <h3>Upload photo</h3>
    @if (ImageUrl != "")
    {
        <img src="@ImageUrl" />
        <br />
        <br />
    }
    <div class="dropArea @dropClass">
        Drag and drop photo, or click to select a local file.
        <InputFile disabled="@Uploading" multiple
                   OnChange="OnInputFileChange"
                   @ondragenter="HandleDragEnter"
                   @ondragleave="HandleDragLeave" />
    </div>
    <br />
    <h3>Files</h3>
    <ul>
        @foreach (var url in FileUrls)
        {
            var i = 0;
            <li><a href="@url">@url</a><br/></li>
            <button class="bg-warning" @onclick="(args)=> DeleteFile(args, url)">Delete</button>
            i++;
        }
    </ul>
<div class="eop"></div>
</body>

 



@code {

    string DomainName = "https://localhost:7227";
    public async Task<string> PreviewPdf(MouseEventArgs e, EditContext formContext)
    {
        {
            if (formContext.Validate()) {
                Pdf.GenPdf(formInfo, false);
                string url = DomainName + "/PdfData/GeneratedPdf/"+ pdf.PersonsName + ".pdf";
                await jsRuntime.InvokeAsync<object>("open", url, "_blank");

                return "succes";
            }
            else {
                return "failure";
            }
        }
    }
}

@code{
    protected override async Task OnInitializedAsync()
    {
            await ListFiles();
    }
    protected override void OnInitialized()
    {
        Logusername();
        formInfo.PopulateTextFields(formInfo, currentuserName, currentuserEmail);
        formInfo.PopulateGroups();
    }

    public string currentuserName { get; set; }
    public string currentuserEmail { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }

    //Checks if the user is Authenticated, and saves the user name and emil if true, fals sends back to the start page.
    public async void Logusername()
    {
        var authstate = await authenticationStateTask;
        var user = authstate.User;
        if (user.Identity.IsAuthenticated)
        {
            currentuserEmail = user.FindFirstValue(ClaimTypes.Email);
            currentuserName = user.FindFirstValue(ClaimTypes.Name);
        }
        else
        {
            Console.WriteLine("there was an error");
            _navigationmanager.NavigateTo("/");
        }
    }

    public async void SendReimbursement(EditContext formContext) {
        if (formContext.Validate()) {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på du vil sende emailen?");
            if (confirmed)
            {
                Pdf.GenPdf(formInfo, true);
                Pdf.GenPdf(formInfo, false);
                string recipientGroupEmail = formInfo.FindGroupEmail(formInfo.GroupStr);
            }
        }
    }

    //Navigates the the HTTPGET("logout") method in the controller
    public void LogOutUser()
    {
        _navigationmanager.NavigateTo("user/logoutuser", true);
    }
    }
    @code {

        string ImageUrl = "";
        bool Uploading = false;
        List<string> FileUrls = new List<string>();

        // support for drag/drop
        string dropClass = string.Empty;
        void HandleDragEnter()
        {
            dropClass = "dropAreaDrug";
        }
        void HandleDragLeave()
        {
            dropClass = string.Empty;
        }

        async Task OnInputFileChange(InputFileChangeEventArgs args)
        {
            dropClass = string.Empty;

            try
            {
                // disable the upload pane
                Uploading = true;
                await InvokeAsync(StateHasChanged);

                // Resize to no more than 400x400
                var format = "image/png";
                var resizedImageFile = await args.File.RequestImageFileAsync(format, 600, 400);

                // read resized png data into a buffer
                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                // get new filename with a bit of entropy
                string justFileName = Path.GetFileNameWithoutExtension(args.File.Name);
                string newFileNameWithoutPath = $"{justFileName}-{DateTime.Now.Ticks.ToString()}.png";
                string filename = $"{Environment.CurrentDirectory}\\Pages\\Images\\{newFileNameWithoutPath}";

                // write the file
                File.WriteAllBytes(filename, buffer);

                ImageUrl = $"Pages/Images/{newFileNameWithoutPath}";

                await ListFiles();

                Uploading = false;

            }
            catch (Exception ex)
            {
                Uploading = false;
                await InvokeAsync(StateHasChanged);
                System.Diagnostics.Debug.WriteLine(ex.Message);
                throw;
            }
        }

        async Task ListFiles()
        {
            FileUrls.Clear();
            var files = Directory.GetFiles(Environment.CurrentDirectory + "\\Pages\\Images", "*.*");
            foreach (var filename in files)
            {
                var file = Path.GetFileName(filename);
                string url = $"Pages/Images/{file}";
                FileUrls.Add(url);
            }
            await InvokeAsync(StateHasChanged);
        }

        async Task<string> DeleteFile(MouseEventArgs e, string url){
            Console.WriteLine(url);
            FileUrls.Clear();
            File.Delete(Environment.CurrentDirectory+"/"+url);
            await ListFiles();
            await InvokeAsync(StateHasChanged);
            return "succes";
        }
}